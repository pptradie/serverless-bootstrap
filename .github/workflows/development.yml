name: DEPLOY DEVELOPMENT BRANCH

on:
  push:
    branches:
      - staging

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false
  test:
    name: Test and Coverage Check
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Cache node modules
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage threshold
        run: |
          npm run test:coverage
          if [ $? -ne 0 ]; then
            echo "Tests failed or coverage threshold not met"
            exit 1
          fi

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download coverage results
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy
    needs: [lint, test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Cache node modules
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Serverless dependencies
        uses: actions/cache@v3
        with:
          path: .serverless
          key: ${{ runner.os }}-serverless-${{ hashFiles('serverless.yml') }}
          restore-keys: |
            ${{ runner.os }}-serverless-

      # - name: Install dependencies
      #   run: npm ci
      #   if: steps.npm-cache.outputs.cache-hit != 'true'

      # - name: Create .env file
      #   run: |
      #     touch .env
      #     echo -e "APP_BASE_URL=${{ secrets.DEV_APP_BASE_URL }}\nDB_HOST=${{ secrets.DEV_DB_HOST }}\nDB_NAME=${{ secrets.DEV_DB_NAME }}\nDB_USERNAME=${{ secrets.DEV_DB_USERNAME }}\nDB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> .env

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: ${{ secrets.DEV_ROLE_AWS_ACTIONS_IN_GIT_HUB_ACTIONS }}
      #     aws-region: ap-southeast-2
      #     audience: sts.amazonaws.com

      # - name: Deploy to Development
      #   id: deploy
      #   uses: serverless/github-action@v3.1
      #   with:
      #     args: deploy --stage dev --verbose
