name: DEPLOY DEVELOPMENT BRANCH

on:
  push:
    branches:
      - staging

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      # Verify coverage directory exists and show its contents
      - name: Debug coverage directory
        run: |
          ls -la
          ls -la coverage || echo "Coverage directory not found"

      # Upload coverage results with error handling
      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        if: always() # Try to upload even if tests fail
        with:
          name: coverage-report
          path: coverage/lcov.info # Specify exact file
          if-no-files-found: error # Will fail if files not found
  sonarqube:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@<action version> # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy
    needs: [lint, test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Cache node modules
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Serverless dependencies
        uses: actions/cache@v3
        with:
          path: .serverless
          key: ${{ runner.os }}-serverless-${{ hashFiles('serverless.yml') }}
          restore-keys: |
            ${{ runner.os }}-serverless-

      # - name: Install dependencies
      #   run: npm ci
      #   if: steps.npm-cache.outputs.cache-hit != 'true'

      # - name: Create .env file
      #   run: |
      #     touch .env
      #     echo -e "APP_BASE_URL=${{ secrets.DEV_APP_BASE_URL }}\nDB_HOST=${{ secrets.DEV_DB_HOST }}\nDB_NAME=${{ secrets.DEV_DB_NAME }}\nDB_USERNAME=${{ secrets.DEV_DB_USERNAME }}\nDB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> .env

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: ${{ secrets.DEV_ROLE_AWS_ACTIONS_IN_GIT_HUB_ACTIONS }}
      #     aws-region: ap-southeast-2
      #     audience: sts.amazonaws.com

      # - name: Deploy to Development
      #   id: deploy
      #   uses: serverless/github-action@v3.1
      #   with:
      #     args: deploy --stage dev --verbose
