name: DEPLOY DEVELOPMENT BRANCH

on:
  push:
    branches:
      - staging

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.1" # AWS Lambda uses Node.js 18.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.1" # AWS Lambda uses Node.js 18.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      # Verify coverage directory exists and show its contents
      - name: Debug coverage directory
        run: |
          ls -la
          ls -la coverage || echo "Coverage directory not found"

      # Upload coverage results with error handling
      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        if: always() # Try to upload even if tests fail
        with:
          name: coverage-report
          path: coverage/lcov.info # Specify exact file
          if-no-files-found: error # Will fail if files not found
  code-analysis:
    name: Code Analysis & Security
    needs: test
    uses: ./.github/workflows/sonarqube.yml
    with:
      branch_name: "staging"
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  # PLACE HOLDER STEPS FOR SERVERLESS DEPLOYMENT
  # deploy:
  #   name: Deploy
  #   needs: [lint, test, code-analysis]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   strategy:
  #     matrix:
  #       node-version: [18.x]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  deploy:
    name: Deploy
    needs: [lint, test, code-analysis]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - name: Create .env file
      run: |
        touch .env
        echo -e "APP_BASE_URL=${{ secrets.DEV_APP_BASE_URL }}\nDB_HOST=${{ secrets.DEV_DB_HOST }}\nDB_NAME=${{ secrets.DEV_DB_NAME }}\nDB_USERNAME=${{ secrets.DEV_DB_USERNAME }}\nDB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> .env
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.DEV_ROLE_AWS_ACTIONS_IN_GIT_HUB_ACTIONS }}
        aws-region: ap-southeast-2
    - name: serverless deploy
      uses: serverless/github-action@v3.1
      with:
        args: deploy --stage dev --verbose
