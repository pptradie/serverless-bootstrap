name: DEPLOY PRODUCTION BRANCH

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.1" # AWS Lambda uses Node.js 18.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.1"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Debug coverage directory
        run: |
          ls -la
          ls -la coverage || echo "Coverage directory not found"

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/lcov.info
          if-no-files-found: error

  code-analysis:
    name: Code Analysis & Security
    needs: test
    uses: ./.github/workflows/sonarqube.yml
    with:
      branch_name: "main"
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  deploy:
    name: Deploy
    needs: [lint, test, code-analysis]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Commit Time
        id: get-commit
        run: |
          COMMIT_TIME=$(git log -1 --format=%cd --date=iso8601 ${{ github.sha }})
          echo "commit_time=$COMMIT_TIME" >> $GITHUB_OUTPUT

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm ci

      - name: Create .env file
        run: |
          touch .env
          echo -e "APP_BASE_URL=${{ secrets.PROD_APP_BASE_URL }}\nDB_HOST=${{ secrets.PROD_DB_HOST }}\nDB_NAME=${{ secrets.PROD_DB_NAME }}\nDB_USERNAME=${{ secrets.PROD_DB_USERNAME }}\nDB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> .env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.PROD_ROLE_AWS_ACTIONS_IN_GIT_HUB_ACTIONS }}
          aws-region: ap-southeast-2

      - name: Set EventBus Name
        id: set-bus
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          EVENT_BUS_NAME="serverless-bootstrap-prod-dora-bus-${AWS_ACCOUNT_ID}"
          echo "bus_name=${EVENT_BUS_NAME}" >> $GITHUB_OUTPUT
          echo "Using EventBus: ${EVENT_BUS_NAME}"

      - name: Record Deployment Start
        run: |
          EVENT_DETAIL=$(jq -c -n \
            --arg did "${{ github.run_id }}" \
            --arg cid "${{ github.sha }}" \
            --arg ct "${{ steps.get-commit.outputs.commit_time }}" \
            --arg br "${{ github.ref }}" \
            '{deploymentId: $did, commitId: $cid, commitTime: $ct, branch: $br}')

          ENTRY=$(jq -n \
            --arg src "serverless-app" \
            --arg type "deployment_start" \
            --arg detail "$EVENT_DETAIL" \
            --arg bus "${{ steps.set-bus.outputs.bus_name }}" \
            '{Source: $src, DetailType: $type, Detail: $detail, EventBusName: $bus}')

          echo "Sending deployment start event..."
          aws events put-events --entries "[$ENTRY]"

      - name: serverless deploy
        id: deploy
        uses: serverless/github-action@v3.1
        with:
          args: deploy --stage prod --verbose

      - name: Record Deployment Result
        if: always()
        run: |
          STATUS="${{ steps.deploy.outcome }}"
          EVENT_TYPE="deployment_success"
          if [ "$STATUS" != "success" ]; then
            EVENT_TYPE="deployment_failure"
          fi

          EVENT_DETAIL=$(jq -c -n \
            --arg did "${{ github.run_id }}" \
            --arg cid "${{ github.sha }}" \
            --arg ct "${{ steps.get-commit.outputs.commit_time }}" \
            --arg br "${{ github.ref }}" \
            --arg st "${STATUS}" \
            '{deploymentId: $did, commitId: $cid, commitTime: $ct, branch: $br, status: $st}')

          ENTRY=$(jq -n \
            --arg src "serverless-app" \
            --arg type "$EVENT_TYPE" \
            --arg detail "$EVENT_DETAIL" \
            --arg bus "${{ steps.set-bus.outputs.bus_name }}" \
            '{Source: $src, DetailType: $type, Detail: $detail, EventBusName: $bus}')

          echo "Sending ${EVENT_TYPE} event..."
          aws events put-events --entries "[$ENTRY]"

      - name: Verify CloudWatch Metrics
        if: always()
        run: |
          echo "Checking CloudWatch metrics..."
          START_TIME=$(date -u -d "1 hour ago" "+%Y-%m-%dT%H:%M:00Z")
          END_TIME=$(date -u "+%Y-%m-%dT%H:%M:00Z")

          echo "1. Checking DeploymentFrequency (current hour)..."
          aws cloudwatch get-metric-statistics \
            --namespace "serverless-bootstrap/DORA" \
            --metric-name "DeploymentFrequency" \
            --dimensions Name=Environment,Value=prod \
            --start-time "$START_TIME" \
            --end-time "$END_TIME" \
            --period 60 \
            --statistics Sum

          echo "2. Checking LeadTimeForChanges (current hour)..."
          aws cloudwatch get-metric-statistics \
            --namespace "serverless-bootstrap/DORA" \
            --metric-name "LeadTimeForChanges" \
            --dimensions Name=Environment,Value=prod \
            --start-time "$START_TIME" \
            --end-time "$END_TIME" \
            --period 60 \
            --statistics Average

          echo "3. Checking metric definitions..."
          aws cloudwatch list-metrics \
            --namespace "serverless-bootstrap/DORA" \
            --dimensions Name=Environment,Value=prod

          echo "4. Checking dashboard..."
          aws cloudwatch get-dashboard \
            --dashboard-name serverless-bootstrap-prod-dora-metrics || echo "Dashboard not found"

          echo "5. Debug: Current time information"
          echo "Current time (UTC): $(date -u "+%Y-%m-%dT%H:%M:%SZ")"
          echo "Start time: $START_TIME"
          echo "End time: $END_TIME"
