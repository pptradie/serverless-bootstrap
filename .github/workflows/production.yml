name: DEPLOY PRODUCTION BRANCH

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main

jobs:
  get-change-info:
    name: Get Change Information
    runs-on: ubuntu-latest
    outputs:
      change_start_time: ${{ steps.change-info.outputs.change_start_time }}
      pr_number: ${{ steps.change-info.outputs.pr_number }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Change Start Time
        id: change-info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Direct PR event
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_CREATE_TIME="${{ github.event.pull_request.created_at }}"
          else
            # Push event - try to find associated PR
            PR_NUMBER=$(gh pr list --search "${{ github.sha }}" --state merged --json number -q '.[0].number')
            if [[ ! -z "$PR_NUMBER" ]]; then
              PR_CREATE_TIME=$(gh pr view $PR_NUMBER --json createdAt -q .createdAt)
            fi
          fi

          if [[ ! -z "$PR_CREATE_TIME" ]]; then
            echo "change_start_time=$PR_CREATE_TIME" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            # Fallback to commit time if no PR found
            COMMIT_TIME=$(git log -1 --format=%cd --date=iso8601 ${{ github.sha }})
            echo "change_start_time=$COMMIT_TIME" >> $GITHUB_OUTPUT
          fi

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: [get-change-info]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.1"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.1"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/lcov.info
          if-no-files-found: error

  code-analysis:
    name: Code Analysis & Security
    needs: test
    uses: ./.github/workflows/sonarqube.yml
    with:
      branch_name: "main"
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  deploy:
    name: Deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [get-change-info, lint, test, code-analysis]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      incident_id: ${{ steps.deploy.outputs.incident_id }}
      incident_start: ${{ steps.deploy.outputs.incident_start }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.1"
          cache: "npm"

      - run: npm ci

      - name: Create .env file
        run: |
          touch .env
          echo -e "APP_BASE_URL=${{ secrets.PROD_APP_BASE_URL }}\nDB_HOST=${{ secrets.PROD_DB_HOST }}\nDB_NAME=${{ secrets.PROD_DB_NAME }}\nDB_USERNAME=${{ secrets.PROD_DB_USERNAME }}\nDB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> .env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.PROD_ROLE_AWS_ACTIONS_IN_GIT_HUB_ACTIONS }}
          aws-region: ap-southeast-2

      - name: Set EventBus Name
        id: set-bus
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          EVENT_BUS_NAME="serverless-bootstrap-prod-dora-bus-${AWS_ACCOUNT_ID}"
          echo "bus_name=${EVENT_BUS_NAME}" >> $GITHUB_OUTPUT
          echo "Using EventBus: ${EVENT_BUS_NAME}"

      - name: Record Deployment Start
        run: |
          EVENT_DETAIL=$(jq -c -n \
            --arg did "${{ github.run_id }}" \
            --arg cid "${{ github.sha }}" \
            --arg cst "${{ needs.get-change-info.outputs.change_start_time }}" \
            --arg prn "${{ needs.get-change-info.outputs.pr_number }}" \
            --arg br "${{ github.ref }}" \
            '{
              deploymentId: $did,
              commitId: $cid,
              changeStartTime: $cst,
              pullRequestNumber: $prn,
              branch: $br,
              changeType: "deployment"
            }')

          ENTRY=$(jq -n \
            --arg src "serverless-app" \
            --arg type "deployment_start" \
            --arg detail "$EVENT_DETAIL" \
            --arg bus "${{ steps.set-bus.outputs.bus_name }}" \
            '{Source: $src, DetailType: $type, Detail: $detail, EventBusName: $bus}')

          echo "Sending deployment start event..."
          aws events put-events --entries "[$ENTRY]"

      - name: serverless deploy
        id: deploy
        uses: serverless/github-action@v3.1
        with:
          args: deploy --stage prod --verbose

      - name: Record Deployment Result
        if: always()
        run: |
          STATUS="${{ steps.deploy.outcome }}"
          EVENT_TYPE="deployment_success"
          SEVERITY="none"
          IMPACTED_SERVICES="[]"

          if [ "$STATUS" != "success" ]; then
            EVENT_TYPE="deployment_failure"
            SEVERITY="high"
            IMPACTED_SERVICES='["api", "database"]'
            
            # Record the start time for MTTR calculation
            INCIDENT_ID="${{ github.run_id }}"
            START_TIME=$(date -u "+%Y-%m-%dT%H:%M:%SZ")
            
            # Store incident info for later resolution
            echo "incident_id=$INCIDENT_ID" >> $GITHUB_OUTPUT
            echo "incident_start=$START_TIME" >> $GITHUB_OUTPUT
          fi

          EVENT_DETAIL=$(jq -c -n \
            --arg did "${{ github.run_id }}" \
            --arg cid "${{ github.sha }}" \
            --arg cst "${{ needs.get-change-info.outputs.change_start_time }}" \
            --arg prn "${{ needs.get-change-info.outputs.pr_number }}" \
            --arg br "${{ github.ref }}" \
            --arg st "${STATUS}" \
            --arg sev "${SEVERITY}" \
            --argjson imp "${IMPACTED_SERVICES}" \
            '{
              deploymentId: $did,
              commitId: $cid,
              changeStartTime: $cst,
              pullRequestNumber: $prn,
              branch: $br,
              status: $st,
              severity: $sev,
              impactedServices: $imp,
              changeType: "deployment"
            }')

          ENTRY=$(jq -n \
            --arg src "serverless-app" \
            --arg type "$EVENT_TYPE" \
            --arg detail "$EVENT_DETAIL" \
            --arg bus "${{ steps.set-bus.outputs.bus_name }}" \
            '{Source: $src, DetailType: $type, Detail: $detail, EventBusName: $bus}')

          echo "Sending ${EVENT_TYPE} event..."
          aws events put-events --entries "[$ENTRY]"

      - name: Record Incident Resolution
        if: failure()
        run: |
          RESOLUTION_TIME=$(date -u "+%Y-%m-%dT%H:%M:%SZ")

          EVENT_DETAIL=$(jq -c -n \
            --arg iid "${{ steps.deploy.outputs.incident_id }}" \
            --arg did "${{ github.run_id }}" \
            --arg st "${{ steps.deploy.outputs.incident_start }}" \
            --arg rt "$RESOLUTION_TIME" \
            --arg rm "rollback" \
            --arg sev "high" \
            --argjson imp '["api", "database"]' \
            '{
              incidentId: $iid,
              deploymentId: $did,
              startTime: $st,
              resolveTime: $rt,
              resolutionMethod: $rm,
              severity: $sev,
              impactedServices: $imp,
              changeType: "incident"
            }')

          ENTRY=$(jq -n \
            --arg src "serverless-app" \
            --arg type "incident_resolve" \
            --arg detail "$EVENT_DETAIL" \
            --arg bus "${{ steps.set-bus.outputs.bus_name }}" \
            '{Source: $src, DetailType: $type, Detail: $detail, EventBusName: $bus}')

          echo "Sending incident resolution event..."
          aws events put-events --entries "[$ENTRY]"
