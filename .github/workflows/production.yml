name: DEPLOY PRODUCTION BRANCH

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.1" # AWS Lambda uses Node.js 18.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18.17.1" # AWS Lambda uses Node.js 18.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      # Verify coverage directory exists and show its contents
      - name: Debug coverage directory
        run: |
          ls -la
          ls -la coverage || echo "Coverage directory not found"

      # Upload coverage results with error handling
      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        if: always() # Try to upload even if tests fail
        with:
          name: coverage-report
          path: coverage/lcov.info # Specify exact file
          if-no-files-found: error # Will fail if files not found
  code-analysis:
    name: Code Analysis & Security
    needs: test
    uses: ./.github/workflows/sonarqube.yml
    with:
      branch_name: "main"
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

deploy:
    name: Deploy
    needs: [lint, test, code-analysis]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get Commit Time
      id: get-commit
      run: |
        COMMIT_TIME=$(git log -1 --format=%cd --date=iso8601 ${{ github.sha }})
        echo "commit_time=$COMMIT_TIME" >> $GITHUB_OUTPUT

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - run: npm ci

    - name: Create .env file
      run: |
        touch .env
        echo -e "APP_BASE_URL=${{ secrets.PROD_APP_BASE_URL }}\nDB_HOST=${{ secrets.PROD_DB_HOST }}\nDB_NAME=${{ secrets.PROD_DB_NAME }}\nDB_USERNAME=${{ secrets.PROD_DB_USERNAME }}\nDB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> .env

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.PROD_ROLE_AWS_ACTIONS_IN_GIT_HUB_ACTIONS }}
        aws-region: ap-southeast-2

    # Add debug step to check AWS configuration
    - name: Debug AWS Configuration
      run: |
        aws sts get-caller-identity
        EVENT_BUS_NAME="serverless-bootstrap-prod-dora-bus"
        echo "Checking EventBus: $EVENT_BUS_NAME"
        aws events describe-event-bus --name $EVENT_BUS_NAME || echo "EventBus not found"

    - name: Record Deployment Start
      run: |
        EVENT_BUS_NAME="serverless-bootstrap-prod-dora-bus"
        echo "Sending deployment start event to $EVENT_BUS_NAME"
        
        aws events put-events --entries '[{
          "Source": "serverless-app",
          "DetailType": "deployment_start",
          "Detail": "{\"deploymentId\":\"${{ github.run_id }}\",\"commitId\":\"${{ github.sha }}\",\"commitTime\":\"${{ steps.get-commit.outputs.commit_time }}\",\"branch\":\"${{ github.ref }}\"}",
          "EventBusName": "'$EVENT_BUS_NAME'"
        }]' || echo "Failed to send event"

    - name: serverless deploy
      id: deploy
      uses: serverless/github-action@v3.1
      with:
        args: deploy --stage prod --verbose

    - name: Record Deployment Result
      if: always()
      run: |
        EVENT_BUS_NAME="serverless-bootstrap-prod-dora-bus"
        STATUS="${{ steps.deploy.outcome }}"
        EVENT_TYPE="deployment_success"
        if [ "$STATUS" != "success" ]; then
          EVENT_TYPE="deployment_failure"
        fi
        
        echo "Sending $EVENT_TYPE event to $EVENT_BUS_NAME"
        aws events put-events --entries '[{
          "Source": "serverless-app",
          "DetailType": "'$EVENT_TYPE'",
          "Detail": "{\"deploymentId\":\"${{ github.run_id }}\",\"commitId\":\"${{ github.sha }}\",\"commitTime\":\"${{ steps.get-commit.outputs.commit_time }}\",\"branch\":\"${{ github.ref }}\",\"status\":\"'$STATUS'\"}",
          "EventBusName": "'$EVENT_BUS_NAME'"
        }]' || echo "Failed to send event"

    # Add verification steps
    - name: Verify EventBridge and Lambda
      if: always()
      run: |
        echo "Checking recent EventBridge events..."
        aws events list-rules --event-bus-name serverless-bootstrap-prod-dora-bus
        
        echo "Checking Lambda logs..."
        LOG_GROUP="/aws/lambda/serverless-bootstrap-prod-doraMetrics"
        aws logs describe-log-streams \
          --log-group-name "$LOG_GROUP" \
          --order-by LastEventTime \
          --descending \
          --limit 1 || echo "No log streams found"